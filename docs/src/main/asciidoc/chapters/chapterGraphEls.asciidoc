== Tecnologías en el lado del servidor
ifndef::sourcedir[:sourcedir: ../../../../../src]
ifndef::graphSchema[:graphSchema: /jvmMain/resources/schema]
ifndef::jvmModel[:jvmModel: /jvmMain/kotlin/application/model]
ifndef::jvmApplication[:jvmApplication: /jvmMain/kotlin/application]
ifndef::jvmGraph[:jvmGraph: /jvmMain/kotlin/application/graphQL]
:icons: font

[abstract]
En este apartado se va a hablar de Spring Boot y los plugins y tecnologías utilizados en el lado del servidor.

=== Spring Boot
Spring Boot es una tecnología que permite crear aplicaciones autocontenidas, encargandose de tareas como la configuración de dependencias y el despliegue del sistema. Es muy utilizado hoy en día en las empresas.

Otra de las ventajas que otorga Spring Boot es el uso de "extensiones" o "plugins" que envuelven gran cantidad de funcionalidades simplificando enormemente el uso de las mismas. Un ejemplo de extensiones utilizadas en este proyecto son el "framework" *DGS*, desarrollado por Netflix, y *Spring Data Elasticsearch*.

=== GraphQL y el framework DGS:
El framework DGS desarrollado por Netflix hace que sea muy fácil crear un servidor con soporte a GraphQL. Utiliza la sintaxis de Spring Boot para "enmascarar" y contener las funciones de diseño de los elementos de un sistema GraphQL. Además, lo provee de una URL en la que recibe todas las llamadas a GraphQL, que por defecto sería "/graphql". En esta ruta se reciben las peticiones POST que en el "body" o cuerpo de la petición contendría la llamada en formato JSON para GraphQL. El propio framework se encarga de mapearla y traducirla a los objetos y llamadas internas del sistema.

Todo servidor GraphQL necesita un esquema que represente los tipos y funciones existentes en el mismo. En este caso las funciones del esquema en cuestión son las siguientes:


[source,graphql]
----
include::{sourcedir}{graphSchema}/schema.graphqls[tags=functions]
----
<1> La consulta "search" devuelve una página de resultados basándose en el texto introducido y a varios parámetros que indican el número de página que se desea así como el orden de los resultados y los distintos filtros aplicados a la búsqueda
<2> La consulta "getRecord" devuleve un dato a partir del id del mismo.
<3> La mutación "removeRelated" indica que el elemento con el id "relatedId" ya no está relacionado con el elemento con id "recordId"

Más adelante se verán los distintos elementos y su contenido. Este apartado se centra en las funciones principales del framework DGS y el comportamiento de GraphQL.

Los elementos de tipo query definen las consultas a la API y se corresponden con lo que comúnmente sería una petición de tipo GET. DGS se encarga de "envolver" con el esquema la funcionalidad de la aplicación.

[source,kotlin,linenum]
----
include::{sourcedir}{jvmGraph}/fetcher/AllMetadataDataFetcher.kt[tags=fetcher]
----
<1> La etiqueta DgsComponent indica que la clase contiene elementos del framework que se relacionarán con el esquema de GraphQL
<2> Los elementos etiquetados con DgsQuery mapean la función con los elementos de tipo query definidos en el esquema que tengan el mismo nombre
<3> La etiqueta InputArgument representa los argumentos de la función del esquema.
<4> Este elemento tiene una dependencia sobre la clase BasicService, que, como su nombre indica, es un servicio o conjunto de funciones que realizan las llamadas a la base de datos y ejecutan la lógica de las funciones de GraphQL.

De esta forma, cuando DGS recibe una petición a la URL de GraphQL, automáticamente realiza la llamada a la función correspondiente, que a su vez, invoca las funciones  dentro del BasicService.

El BasicService se encarga de hacer las llamadas a la base de datos y de recuperar toda la información extra que haga falta de cara a completar la información que se sirve al usuario. Se obtienen los elementos (servicios y conjuntos de datos) relacionados, se ordenan y filtran los resultados y se calculan las facetas/filtros en tiempo real.

Por otro lado, los elementos de tipo mutation son lo que correspondería con un POST o un PUT. Son llamadas que buscan modificar de algún modo la base de datos.

[source,kotlin,linenum]
----
include::{sourcedir}{jvmGraph}/mutator/RelatedMutation.kt[tags=mutator]
----
<1> Etiqueta que indica que la llamada es una "mutation"

En este caso, la función del BasicService recupera el elemento, modifica el valor del campo que indica si se relaciona o no para marcarlo como "no relacionado" y guarda el dato modificado. A continuación devuelve el propio dato con la información ya modificada al usuario.

Las funciones de BasicService se pueden ver más en profundidad en el apartado dedicado a Elasticsearch.

=== Elasticsearch y spring-data elasticsearch:
Elasticsearch es un motor de búsqueda y analítica distribuido, gratuito y abierto https://www.elastic.co/es/what-is/elasticsearch[REF]. Está desarrollado sobre Apache Lucene y facilita el acceso a los datos mediante API REST muy simples. Para cargar los datos se han creado dos scripts de Python que procesan y almacenan los datos en los índices de Elasticsearch. Cuando un dato se almacena en Elasticsearch, el sistema lo analiza e indexa de forma que se pueden obtener datos buscando a través de múltiples parámetros (ID, palabras clave, texto, tamaño de resultados o cantidad de resultados a analizar, entre otros). Como los índices se construyen por campos, se facilita el filtrado y búsqueda de los distintos documentos. Esto permite, dentro de una aplicación como la que se está planteando en este trabajo, almacenar e indexar un conjunto de documentos y posteriormente buscar, por ejemplo, en su título y contenido como se haría en un buscador habitual añadiendo incluso palabras clave o cualquier elemento extra que se considere oportuno.

Spring-data Elasticsearch, por su parte, es un proyecto que permite conectar fácilmente instancias de Elasticsearch con una aplicación de Spring Boot.  Mediante notación de Spring, se encarga de crear interfaces y plantillas que enmascaran el acceso a la información haciendo uso de la API mencionada previamente. En consecuencia, el acceso a dicha información se vuelve muy simple. A continuación se va a ver cómo se ha utilizado en este proyecto:

[source,kotlin,linenum]
----
include::{sourcedir}{jvmModel}/MetadataElasticsearchRepository.kt[tags=repository]
----

<1> Declara una interfaz de nombre "MetadataElasticsearchRepository" que más adelante se vinculará con el repositorio que almacena los metadatos al completo
<2> Interfaz que conectará con el índice que contiene los conjuntos de datos
<3> Interfaz que conectará con el índice que contiene los servicios
<4> Dentro del repositorio de metadatos se aprovecha la sintaxis de Spring para declarar una función que busca por título o descripción de un objeto y recibe por parámetro el título y la descripción por los que se desea buscar. Esta sintaxis, llama de forma ajena al usuario a la API que se ha mencionado previamente de Elasticsearch y busca dentro del repositorio los campos "title" y "description" de cada documento para compararlos con los proporcionados como parámetros sin que haya que configurar nada más.

Para indicar qué índice se debe utilizar en cada repositorio, se añade en la declaración de los tipos en Kotlin la siguiente información:

[source,kotlin,linenum]
----
include::{sourcedir}{jvmModel}/ElsService.kt[tags=elasticsearch]
----

[source,kotlin,linenum]
----
include::{sourcedir}{jvmModel}/ElsDataset.kt[tags=elasticsearch]
----

La etiqueta "@Document" de la primera línea indica el nombre del índice en el que se almacenan esos objetos. Cuando se crea un "Repository" como los vistos en el párrafo anterior, se vincula con un tipo, que indica el tipo de objetos que almacena y el tipo de clave/id que se utiliza, en este caso la clave es la etiquetada como "@Id" y el tipo es el objeto en cuestión. Los campos de los objetos se corresponden con los campos de cada documento en el índice. En el índice de Elasticsearch la información se guarda en un formato JSON, que el propio spring-data se encarga de mapear y recuperar en forma de objetos de Kotlin.

Finalmente, se va a ver cómo se utilizan las funciones de spring-data en el código de nuestra aplicación:

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=elasticimport]
----

En primer lugar, se crea un servicio dentro de la aplicación que sirva las funciones que se necesiten. En este caso, se van a implementar las funciones que se han indicado en el esquema de GraphQL. Para dar acceso a los repositorios, se pasan como dependencias o parámetros de la clase los distintos repositorios. Gracias a la sintaxis de Spring, las dependencias entre el servicio y los repositorios se resuelven de forma automática y al desplegar la aplicación, el servicio tiene acceso a los repositorios sin necesitar ninguna configuración más.

Una vez se ha creado el servicio, se definen dentro las funciones:

Las funciones "getRecord" y "search" tienen una serie de parámetros iguales a los que se han planteado en el esquema de GraphQL para las funciones homónimas. Si bien no es necesario que las funciones y los parámetros se llamen igual que las definidas en el esquema de GraphQL, ya que se podrían seguir otras aproximaciones, es muy recomendable para mantener el código lo más legible posible.

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=getrecord]
----
<1> En primer lugar, se obtiene el metadato al completo del repositorio de registros de metadatos
<2> En segundo lugar, según este registro sea un servicio o un conjunto de datos, se obtiene la información del mismo del repositorio que corresponda, para poder completar los valores de los elementos relacionados
<3> Para almacenar los elementos relacionados de cada elemento relacionado, se sigue el mismo proceso que para el elemento principal y según sea servicio o conjunto de datos se busca en el repositorio que corresponda el elemento que completa el "primaryTopic".

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=search]
----
<1> La obtención de los elementos de los distintos repositorios se realiza en una función auxiliar.

La función de "search" se encarga de calcular los filtros además de obtener los datos que se buscan.

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=finddata]
----
<1> Si hay elementos para la búsqueda, se utilizan para buscar por título o descripción los posibles recursos, indicando que es una búsqueda paginada. Si no los hay, se devuelve la lista al completo de los recursos disponibles
<2> Se obtienen todos los elementos de los servicios y conjuntos de datos para obtener más fácilmente los distintos valores haciendo uso de la función "find" de Kotlin


NOTE: Pensar si poner o no las funciones auxiliares en la documentación

Estas dos funciones hacen uso de otras funciones auxiliares también definidas en el propio servicio. No obstante, estas funciones no son relevantes a nivel global dentro de la aplicación, por lo que no se van a explicar en detalle en esta documentación. Por otro lado, se pueden encontrar también las funciones *"removeRealated"* y *"suggest"*. Estas funciones "eliminan" un elemento de la lista de elementos relacionados de otro registro y devuelven una lista de títulos sugeridos según un término de búsqueda, respectivamente.

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=rmrelated]
----
<1> Se obtiene el elemento del que se va a eliminar el relacionado del repositorio de servicios o de conjuntos de datos según corresponda.
<2> Se modifica el valor booleano del recurso relacionado, marcándolo a "false" para indicar que ya no está relacionado
<3> Se guarda el elemento modificado
<4> La función devuelve el registro que tendrá dentro de su "primaryTopic" el elemento que acaba de ser modificado

[source,kotlin,linenum]
----
include::{sourcedir}{jvmApplication}/BasicService.kt[tags=suggest]
----
<1> Crea una instancia de un "Suggest Builder" que indica que se debe buscar por el campo "title" preparado para autocompletar ("completion"), que empiece por la cadena introducida como parámetro y que tenga un tamaño máximo de 20 resultados.
<2> Se indica que la recomendación o "Suggest" a construir es por el campo "title", con todos los parámetros indicados en el constructor anterior.
<3> Se construye la consulta con el constructor de consultas de Elasticsearch de Spring-Data, que recibe como parámetro la consulta creada.
<4> Se realiza la búsqueda sobre la instancia de Elasticsearch, indicando el tipo de dato que se busca recuperar (lo que indicará también el índice).
<5> Se obtienen de los resultados obtenidos únicamente las cadenas de texto que devuelve Elasticsearch, añadiéndolas a la lista de cadenas que se devolverá en la función.
<6> Devuelve los valores filtrando repetidos. De esta forma aunque haya varios elementos con títulos parecidos no aparecerá una misma recomendación de autocompletado dos veces.

El uso de GraphQL permite enmascarar todas estas funciones y llamadas de cara al usuario, completando mucha información que no estaría presente originalmente, como los contenidos de los elementos relacionados. Además de calcular los filtros y de hacer la ordenación de los resultados en el servidor independientemente del tipo de base de datos que se utilice.